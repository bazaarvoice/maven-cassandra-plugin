<?xml version="1.0"?>

<!-- Copyright (c) 2007-2009 Adobe Systems Incorporated. All Rights Reserved. -->

<!-- XML Schema for policy files -->
<!-- Generic version for all policy files; see more specific schemas at
     PolicyFileHttp.xsd, PolicyFileHttps.xsd, PolicyFileFtp.xsd, PolicyFileSocket.xsd -->
<!-- Note that several different user-agents support policy files, and each may support
     a different set of the tags described here.  Consult the documentation for your
     particular user-agent in order to verify that you are using syntax it supports.
     The rules here only help validate that a policy file is well-formed. -->

<!-- No target namespace. Flash Player will not parse policy files that
     use explicit namespace qualification (e.g. <pf:cross-domain-policy>),
     so we place our types in the unqualified namespace to discourage
     qualification in policy files. -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="qualified"
        xmlns="http://www.adobe.com/xml/schemas/PolicyFile.xsd"
        targetNamespace="http://www.adobe.com/xml/schemas/PolicyFile.xsd">

	<!-- Meta-policy: a policy on policies.
	     A declaration in a master policy file, controlling what other policy files
	     may exist on the server. -->
	<xsd:simpleType name="meta-policy-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="all"/>
			<xsd:enumeration value="by-content-type"/>
			<xsd:enumeration value="by-ftp-filename"/>
			<xsd:enumeration value="master-only"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- DNS domain name.
	     Wildcard forms "*" and "*.foo.com" also allowed. -->
	<xsd:simpleType name="domain-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="\*|(\*?[A-Za-z0-9\-\.]+)"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- TCP/UDP port range -->
	<xsd:simpleType name="ports-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="\*|([0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*)"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- secure attribute: permits override of default rule
	     that HTTPS resources require HTTPS accessors -->
	<xsd:simpleType name="secure-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="true"/>
			<xsd:enumeration value="false"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Set of HTTP header names.
	     Wildcard forms "*" and "Prefix-*" also allowed. -->
	<xsd:simpleType name="headers-attribute">
		<xsd:restriction base="xsd:string">
			<!-- What is a legal header name?
			     RFC2616, which defines HTTP/1.1, refers to RFC822, which defines email.
			     RFC822 says that anything from ASCII 33 - 126 (decimal), minus the colon, is legal.
			     From this, we subtract the comma, since we interpret it as a separator,
			     and the asterisk, since we interpret it as a wildcard. -->
			<xsd:pattern value="\*|([^:]+\*?(,[^:]+\*?)*)"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- SHA-1 fingerprint: 40 hex digits, with optional spaces and colons as separators -->
	<xsd:simpleType name="sha1-fingerprint-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="([0-9a-fA-F][: ]?){40}"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- SHA-1 fingerprint algorithm designation: case insensitive -->
	<xsd:simpleType name="sha1-fingerprint-algorithm-attribute">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[Ss][Hh][Aa]-1"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- site-control tag: site-wide declarations for master policy file -->
	<xsd:complexType name="site-control-element">
		<xsd:attribute name="permitted-cross-domain-policies" use="required" type="meta-policy-attribute"/>
	</xsd:complexType>

	<!-- allow-access-from tag: permit access by documents from specified domains -->
	<xsd:complexType name="allow-access-element">
		<xsd:attribute name="domain" use="required" type="domain-attribute"/>
		<xsd:attribute name="to-ports" use="optional" type="ports-attribute"/>
		<xsd:attribute name="secure" use="optional" type="secure-attribute"/>
	</xsd:complexType>

	<!-- allow-http-request-headers-from tag: permit HTTP request header sending
	     by documents from specified domains -->
	<xsd:complexType name="allow-headers-element">
		<xsd:attribute name="domain" use="required" type="domain-attribute"/>
		<xsd:attribute name="headers" use="required" type="headers-attribute"/>
		<xsd:attribute name="secure" use="optional" type="secure-attribute"/>
	</xsd:complexType>

	<!-- certificate tag: identifies a signing certificate by its fingerprint.
	     For now, the only fingerprint algorithm supported is SHA-1.
	     The fingerprint is to be computed over the DER encoding of an X.509 certificate. -->
	<xsd:complexType name="certificate-element">
		<xsd:attribute name="fingerprint" use="required" type="sha1-fingerprint-attribute"/>
		<xsd:attribute name="fingerprint-algorithm" use="required" type="sha1-fingerprint-algorithm-attribute"/>
	</xsd:complexType>

	<!-- signatory tag: permit access by documents signed with specified credentials -->
	<xsd:complexType name="signatory-element">
		<xsd:choice>
			<xsd:element name="certificate" type="certificate-element" minOccurs="1" maxOccurs="1"/>
		</xsd:choice>
	</xsd:complexType>

	<!-- allow-access-from-identity tag: permit access by documents identified by
	     cryptographic means.
	     For now, these means are limited to signatures. -->
	<xsd:complexType name="allow-access-identity-element">
		<xsd:choice>
			<xsd:element name="signatory" type="signatory-element" minOccurs="1" maxOccurs="1"/>
		</xsd:choice>
	</xsd:complexType>

	<!-- cross-domain-policy tag: top-level tag in the file -->
	<xsd:complexType name="cross-domain-policy-element">
		<xsd:sequence>
			<xsd:element name="site-control" minOccurs="0" maxOccurs="1" type="site-control-element"/>
			<xsd:element name="allow-access-from" minOccurs="0" maxOccurs="unbounded" type="allow-access-element"/>
			<xsd:element name="allow-http-request-headers-from" minOccurs="0" maxOccurs="unbounded" type="allow-headers-element"/>
			<xsd:element name="allow-access-from-identity" minOccurs="0" maxOccurs="unbounded" type="allow-access-identity-element"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- specify top-level tag -->
	<xsd:element name="cross-domain-policy" type="cross-domain-policy-element"/>

</xsd:schema>

<!-- End of file. -->
