<?xml version="1.0"?>
<xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://www.bazaarvoice.com/xs/meta/1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
        >
    <xs:attribute name="includeIn" type="xs:string"/>
    <xs:attribute name="excludeFrom" type="xs:string"/>

    <!--
        Indicates than an <xs:sequence/> in bv-all-1.0.xsd should be changed to <xs:all/> in the public customer-facing
        XML schemas.  This will give us the following behavior:
         1. XmlBeans Java code is generated using <xs:sequence/> so XmlBeans will ensure the Xml elements are output in the
            same order as specified in bv-all-1.0.xsd, making the Xml more consistent and easier to read.
         2. But customers will validate using <xs:all/> which doesn't enforce order, making it easier for us to write STX
            transformations to backward-migrate Xml documents since we don't have to worry about the order in which STX
            outputs its elements.
     -->
    <xs:attribute name="changeToAll" type="xs:boolean"/>

    <!--
        Attribute disables the warning that an <xs:sequence/> must be changeToAll or have a simple collection of unbounded
        children.  A sequence should be marked with the POOR_BACKWARD_COMPATIBILITY tag if it means a future STX transform
        that tries to migrate the element must explicitly worry about the order elements appear in, in a way that makes the
        STX transform more complicated to write than usual.  In the past we've been bitten by <xs:sequence/> elements and
        transforms that don't generate elements in the correct order, leading to backward compatiblity migration scripts
        that generate documents that don't validate against the schema.
     -->
    <xs:attribute name="POOR_BACKWARD_COMPATIBILITY" type="xs:boolean"/>

    <!--
        Similar to POOR_BACKWARD_COMPATIBILITY but indicates that the situation doesn't actually affect backward compatibility.
     -->
    <xs:attribute name="SEQUENCE_SPECIAL_CASE" type="xs:boolean"/>

    <!--
        Attribute indicating to the XML->JSON transform to output a list as a map instead of an array and use the value as the element field name.
        Example meta:jsonMapKey="id" will use the id value of the elements as their key. Can be either an element of  primitive type or an attribute.
     -->
    <xs:attribute name="jsonMapKey" type="xs:string"/>

    <!--
        Attribute indicating to the XML->JSON transform not to output null if the element is not present in the XML. Use for content returned
        only if requested by the client, such as "include=" and "stat=".
     -->
    <xs:attribute name="jsonNullify" type="xs:boolean"/>

</xs:schema>